# -*- coding: utf-8 -*-
"""Nigam_A_Lab1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H8kdncvttPzsDrNuNfL6CgEBe1uotXFO
"""

# Name: Arul Nigam
# Period: 3

'''Day 1 Tasks: '''
# 1. Given an input of a space-separated list of any length of integers, output the sum of them. 
inpList = input("list of numbers: ").strip().split()
print("1. sum = ", sum([int(x) for x in inpList]))
# 2. Output the list of those integers (from #1) that are divisible by three.
print("2. list of multiples of 3: ", [i for i in inpList if int(i) % 3 == 0])
# 3. Given an integer input, print the first n Fibonacci numbers. eg. n=6: 1, 1, 2, 3, 5, 8
fibSeq = []     
prevprev, prev = 0, 1
for x in range(int(input("Type n for Fibonacci sequence: "))): 
    fibSeq.append(prev)
    next = prevprev + prev 
    prevprev = prev 
    prev = next
print("3. fibonacci: ", fibSeq)
# 4. Given an input, output a string composed of every other character. eg. Aardvark -> Arvr
print("4. every other str: ", "".join(list(input("Type a string: "))[::2]))
# 5. Given a positive integer input, check whether the number is prime or not.
n = int(input("Type a number to check prime: "))  
if n == 1:
  print("5. 1 is neither prime nor composite - it is a special case!")
if n > 1: 
   prime = True
   for i in range(2, n // 2): # n // 2 is floor division, meaning it rounds down to the nearest whole number. This line checks the possible factors from 2 to half of the value of n
       if n % i == 0:
         prime = False
         break
   if prime:
     print("5.", n, "is prime")
   else: print("5.", n, "is composite")
# 6. Calculate the area of a triangle given three side lengths.  eg. 13 14 15 -> 84
intList = [int(x) for x in input("Enter three side lengths separated by single spaces: ").strip().split()]
s = sum(intList)/2
prod = s
for i in intList:
  prod *= (s-i) # Heron's formula
prod = prod ** (1/2)
print("6. The area is: ", prod) 
# 7. Given a input of a string, remove all punctuation from the string. 
# eg. "Don't quote me," she said. -> Dontquotemeshesaid
import string # library that contains string.punctuation
noPunct = ""
charList = list(input("Type a sentence: ")) # **STRING => LIST OF CHARS**
for i in charList:
  if i not in " ":
      if i not in string.punctuation: # Python has a string called 'punctuation' that contains all punctuation characters
        noPunct += i
print("7. Punct removed: ", noPunct)
# 8. Check whether the input string (from #7, lower cased, with punctuation removed) is a palindrome.
print("8. Is palindrome?: ", noPunct.lower() == noPunct.lower()[::-1])
# 9. Count the number of each vowel in the input string (from #7).
a, e, i, o, u = 0, 0, 0, 0, 0
for x in noPunct:
  if x == "a":
    a += 1
  elif x == "e":
    e += 1
  elif x == "i":
    i += 1
  elif x == "o":
    o += 1
  elif x == "u":
    u += 1
print("9. Count each vowel: ", "a: ", a,  "e: ", e, " i: ", i, " o: ", o, " u: ", u, )
# 10. Given two integers as input, print the value of f\left(k\right)=k^2-3k+2 for each integer between the two inputs.  
# eg. 2 5 -> 0, 2, 6, 12
intPair = list(input("Twpe two integers (lower bound and upper bound): ").strip().split())  
print("10. Evaluate f(k) = k^2 -3k + 2 from ", start, " to ", end, ":")
for k in range (int(intPair[0]), int(intPair[1]) + 1):
  print(k**2 - 3*k + 2)  
'''Day 2 Tasks: '''
# 11. Given an input of a string, determines a character with the most number of occurrences.
from collections import Counter 
inp = input("Type a string: ")
dctnry = Counter(inp) # creates Dictionary 
print("11. Most occured char: ")
for key, val in dctnry.items():
  if val == max(dctnry.values()):
    print(key)
# 12. With the input string from #11, output a list of all the words that start and end in a vowel.
print("12. List of words starting and ending with vowels: ", [i for i in inp.split() if (i[0] in "aeiouAEIOU" and i[-1] in "aeiouAEIOU")])
# 13. With the input string from #11, capitalizes the starting letter of every word of the string and print it.
print("13. Capitalize starting letter of every word: ", inp.title())
# 14. With the input string from #11, prints out the string with each word in the string reversed.
print("14. Reverse every word: ", " ".join(list(i[::-1] for i in inp.split())))
# 15. With the input string from #11, treats the first word of the input as a search string to be found in the rest 
# of the string, treats the second word as a replacement for the first, and treats the rest of the input as the string to be searched.
# 	eg.    b Ba baby boy ->  BaaBay Baoy
inp = inp.split()
print("15. Find the first and replace with the second: ", " ".join(list(inp[2:])).replace(inp[0], inp[1]))
# 16. With an input of a string, removes all duplicate characters from a string.  Eg. detection -> detcion
inp = input("16. Remove all duplicate characters: ")
ret = []
for i in inp:
    if i not in ret:
        ret.append(i)
print(''.join(ret))
# 17. Given an input of a string, determines whether the string contains only digits.
dgt = input("Type a string to check if it has only digits or not: ")
bln = dgt.isdigit() # bln-> boolean
print("17. Is a number?:", bln)
# 18. If #17 prints True, determines whether the string contains only 0 and 1 characters, and if so assumes it is a binary string, 
# converts it to a number, and prints out the decimal value.
binary = True
if bln:
  for i in dgt:
    if i not in "01":
      binary = False
      print("18. It is not a binary number!")
      break
  if binary:
    print("18. It is a binary number: ", int(dgt, 2))
else:
  print("18. It is not a binary number!")
# 19. Write a script that accepts two strings as input and determines whether the two strings are anagrams of each other.
strList = [x for x in input("Type two strings separated by a space to check if they are anagrams: ").strip().split()]
print("19. Are ", strList[0], " and ", strList[1], " anagrams?: ", sorted(strList[0]) == sorted(strList[1]))
# 20. Given an input filename, if the file exists and is an image, find the dimensions of the image.
import PIL
from PIL import Image
from google.colab import drive
drive.mount('/content/drive')
#drive.mount("/content/drive", force_remount=True)
import os
file = input("Type a image url or file name: ") # e.g. drive/My Drive/AI/Colab Notebooks/tj_logo.jpg
if not os.path.isfile(file):
  file = io.BytesIO(urllib.request.urlopen(file).read())
img = Image.open(file)
print("20. Image dimensions: ", img.size)
''' Challenging Questions: '''
# 21. Given an input of a string, find the longest palindrome within the string.
inp = "".join(input("Type a string to find the longest palindrome: ").split())
maximum, init, size, low, high = 1, 0, len(inp), 0, 0
for i in range(1, size): # every char - even length palindrome w/ centers at i and i - 1 
    high = i
    low = i - 1 
    while high < size and low >= 0 and inp[low] == inp[high]: 
        if high - low + 1 > maximum: 
            init = low 
            maximum = high - low + 1
        low = low - 1
        high = high + 1
    high = i + 1 # odd length w/ center at i
    low = i - 1 
    while high < size and low >= 0 and inp[low] == inp[high]: 
        if (high - low + 1) > maximum: 
            init = low 
            maximum = high - low + 1
        low = low - 1
        high = high + 1
print ("Longest palindrome substring is: ", inp[init:(init + maximum)]) 
# 22. Given an input of a string, find all the permutations of a string.
from itertools import permutations 
inp = input("Type a string to do permutations: ")
print("22. all permutations: ", list(permutations(inp)))
# 23. Given the input string from #22, find all the unique permutations of a string.
setA = set()
for i in list(permutations(inp)):
  setA.add(i)
print("23. all unique permutations: ", setA)
# 24. Given an input of a string, find a longest non-decreasing subsequence within the string (according to ascii value).
inp, prev, cur, maximum = input("Type a string to find the longest non-decreasing substring: "), "", "", ""
for i in inp:
    if prev <= i:
        cur += i
        if len(maximum) < len(cur):
            maximum = cur
    else:
        cur = i
    prev = i
print("24. longest non-decreasing sub: ", maximum)
